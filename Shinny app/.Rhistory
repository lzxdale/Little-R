Mar <- read.csv("ADHESIVES-MARCH 2018.csv")
Apr <- read.csv("ADHESIVES-APRIL 2018.csv")
May <- read.csv("ADHESIVES-MAY 2018.csv")
Jun <- read.csv("ADHESIVES-JUNE 2018.csv")
Jul <- read.csv("ADHESIVES-JULY 2018.csv")
Aug <- read.csv("ADHESIVES-AUGUST 2018.csv")
Sep <- read.csv("ADHESIVES-SEPT 2018.csv")
Oct <- read.csv("ADHESIVES-OCTOBER 2018.csv")
Nov <- read.csv("ADHESIVES-NOVEMBER 2018.csv")
Dec <- read.csv("ADHESIVES-DECEMBER 2018.csv")
data <- Jan
Jan$MONTH <-1
data <- Jan
data1 <- list(Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct, Nov, Dec)
for (i in 2:length(data1)){
data1[[i]]$MONTH <- i
names(data1[[i]]) <- names(Jan)
data <- rbind(data,data1[[i]])
}
description <- na.omit(data.frame(data$DESCRIPTION))
for(i in description){
temp <- str_split(as.character(i), " ")
}
name <- temp
for(i in 1:nrow(data)){
for(j in 1:length(temp[[i]])){
name[[i]] <- temp[[i]][!temp[[i]] %in% 'BAGS']
name[[i]] <- name[[i]][!name[[i]] %in% 'BAG']
name[[i]] <- name[[i]][!name[[i]] %in% 'CONT']
name[[i]] <- name[[i]][!name[[i]] %in% 'CAN']
name[[i]] <- name[[i]][!name[[i]] %in% 'JAR']
name[[i]] <- name[[i]][!name[[i]] %in% 'STC']
name[[i]] <- name[[i]][!name[[i]] %in% 'ADV']
name[[i]] <- name[[i]][!name[[i]] %in% 'KGS']
name[[i]] <- name[[i]][!name[[i]] %in% 'OF']
name[[i]] <- name[[i]][!name[[i]] %in% 'CTR']
name[[i]] <- name[[i]][!name[[i]] %in% 'STC']
name[[i]] <- gsub('[[:digit:]]+', '', name[[i]])
name[[i]] <- name[[i]][!name[[i]] %in% 'X']
name[[i]] <- gsub('[[:punct:] ]+',' ',name[[i]])
name[[i]]<-name[[i]][name[[i]]!=""]
name[[i]]<-name[[i]][name[[i]]!=" "]
#name[[i]] <- str_trim(name[[i]])
}
}
for (i in 1:nrow(data)) {
y <- gregexpr("GLUE", name[i],ignore.case = T)
if (y[[1]][1] != -1){
name[i] <- "GLUE"
}
y <- gregexpr("ADHESIVE", name[i],ignore.case = T)
if (y[[1]][1] != -1){
name[i] <- "ADHESIVE"
}
y <- gregexpr("MODIFIED", name[i],ignore.case = T)
if (y[[1]][1] != -1){
name[i] <- "MODIFIED"
}
y <- gregexpr("TAPE", name[i],ignore.case = T)
if (y[[1]][1] != -1){
name[i] <- "TAPE"
}
y <- gregexpr("TAPES", name[i],ignore.case = T)
if (y[[1]][1] != -1){
name[i] <- "TAPE"
}
y <- gregexpr("PROTEIN", name[i],ignore.case = T)
if (y[[1]][1] != -1){
name[i] <- "PROTEIN"
}
y <- gregexpr("EPOXY", name[i],ignore.case = T)
if (y[[1]][1] != -1){
name[i] <- "EPOXY"
}
y <- gregexpr("STARCH", name[i],ignore.case = T)
if (y[[1]][1] != -1){
name[i] <- "STARCH"
}
y <- gregexpr("SEALANT", name[i],ignore.case = T)
if (y[[1]][1] != -1){
name[i] <- "SEALANT"
}
y <- gregexpr("SEAL", name[i],ignore.case = T)
if (y[[1]][1] != -1){
name[i] <- "SEAL"
}
y <- gregexpr("ENZYME", name[i],ignore.case = T)
if (y[[1]][1] != -1){
name[i] <- "ENZYME"
}
y <- gregexpr("ENZYMES", name[i],ignore.case = T)
if (y[[1]][1] != -1){
name[i] <- "ENZYME"
}
y <- gregexpr("CASEINATE", name[i],ignore.case = T)
if (y[[1]][1] != -1){
name[i] <- "CASEINATE"
}
y <- gregexpr("GELATIN", name[i],ignore.case = T)
if (y[[1]][1] != -1){
name[i] <- "GELATIN"
}
}
for (i in 1:nrow(data)){
if(length(name[[i]]) >= 2){
name[[i]] <- "OTHERS"
}
}
for (i in 1:nrow(data)){
if(nchar(as.character(name[[i]]) <= 3)){
name[i] <-"OTHERS"
break
}
}
title <- NULL
for (i in 1:nrow(data)){
title[i]<-name[[i]][1]
}
for (i in 1:nrow(data)) {
y <- gregexpr("MODIFIED", title[i])
if (y[[1]][1] != -1){
title[i] <- "MODIFIED STARCH"
}
}
title <- data.frame(title)
data <- cbind(data,title)
#tmp <- data.frame(title)
#tmp2<- unique(tmp$title)
#tmp2
library(plyr)
data <-data.frame(data)
data1<- ddply(data,~IMPORTER+EXPORTER+ORIGIN+MONTH+title,summarise,L..COST..PhP.=sum(L..COST..PhP.),QUANTITY.kg.=sum(QUANTITY.kg.))
data1$Phpkg<- data1$L..COST..PhP./data1$QUANTITY.kg.
library(countrycode)
data1$Countries <- countrycode(data1$ORIGIN,'iso2c','country.name')
View(title)
View(data1)
write.csv(data1,"Collection_data.csv")
library(shiny); runApp('temp_app1.R')
DF <- read.csv("Collection_data.csv")
product_list <- sort(unique(DF$title))
product_list
DF$title
product_list
df1 <- read.csv("Collection_data.csv")
title <- df1$title
Product <- c('Adhesives',
'Enzymes',
'Epoxy',
'Gelatin',
'Glue',
'Modified Starch',
'Protein',
'Seal',
'Sealant',
'Starch',
'Tape',
'Others')
for (var in title) {
if(!(var %in% Product)){
var = 'Others'
}
}
title
unique(title)
for (var in title) {
if(!(var %in% Product)){
print(var,'not in')
}
}
print('not in')
print(1)
for (var in title) {
if(!(var %in% Product)){
print(var)
print('not in')
}
}
runApp('temp_app.R')
for (var in title) {
if(!(var %in% Product)){
print(var)
print('not in')
}
}
if(var %in% Product){
}
for (var in title) {
if(var %in% Product){
}
else{
print(var)
print('not in')
}
}
Product <- c('ADHESIVE',
'ENZYMES',
'EPOXY',
'GELATIN',
'GLUE',
'MODIFIED STARCH',
'PROTEIN',
'SEAL',
'SEALANT',
'STARCH',
'TAPE',
'OTHERS')
for (var in title) {
if(var %in% Product){
}
else{
print(var)
print('not in')
}
}
df1 <- read.csv("Collection_data.csv")
title <- df1$title
Product <- c('ADHESIVE',
'ENZYMES',
'EPOXY',
'GELATIN',
'GLUE',
'MODIFIED STARCH',
'PROTEIN',
'SEAL',
'SEALANT',
'STARCH',
'TAPE',
'OTHERS')
for (var in title) {
if(var %in% Product){
}
else{
print(var)
print('not in')
}
}
df1 <- read.csv("Collection_data.csv")
title <- df1$title
Product <- c('ADHESIVE',
'ENZYMES',
'EPOXY',
'GELATIN',
'GLUE',
'MODIFIED STARCH',
'PROTEIN',
'SEAL',
'SEALANT',
'STARCH',
'TAPE',
'OTHERS')
for (var in title) {
if(var %in% Product){
}
else{
print(var)
print('not in')
}
}
for (var in length(title)) {
if(title[var] %in% Product){
}
else{
print(title[var])
print('not in')
}
}
for (var in length(title)) {
if(title[var] %in% Product){
}
else{
print(title[var])
print('not in')
}
}
length(title)
for (var in range(length(title))) {
if(title[var] %in% Product){
}
else{
print(title[var])
print('not in')
}
}
for (var in 1:length(title)) {
if(title[var] %in% Product){
}
else{
print(title[var])
print('not in')
}
}
for (var in 1:length(title)) {
if(title[var] %in% Product){
}
else{
title[var] = 'OTHERS'
}
}
for (var in 1:length(title)) {
if(title[var] %in% Product){
}
else{
title[var] = 'OTHERS'
}
}
title
unique(title)
levels(title) = unique(title)
level(title) = unique(title)
df1$title = title
# most frequent words that appear, kinda hard to catagorize products
summary(as.factor(title))
View(df1)
droplevels.data.frame(df1)
df1$title
df1 = droplevels.data.frame(df1)
df1$title
df1
write.csv(df1,"Collection_data.csv")
write.csv(df1,"Collection_data.csv")
runApp('temp_app1.R')
DF <- read.csv("Collection_data.csv")
View(DF)
runApp('temp_app1.R')
shinyApp(ui, server)
runApp('tp.R')
runApp('tp.R')
runApp('tp.R')
runApp('tp.R')
runApp('tp.R')
product_list
DF <- read.csv("Collection_data.csv")
product_list <- sort(unique(DF$title))
product_list
runApp('tp.R')
runApp('tp.R')
runApp('tp.R')
runApp('tp.R')
runApp('tp.R')
top_countries <- DF %>% subset(title == input$product_1) %>% subset(MONTH == input$month) %>% group_by(Countries) %>% summarise(Total = sum(as.numeric(QUANTITY.kg.))) %>% top_n(n = 10, wt = Total)
top_countries=top_countries[order(top_countries$Total,decreasing = TRUE),]
top_countries <- DF %>% subset(title == OTHERS) %>% subset(MONTH == 1) %>% group_by(Countries) %>% summarise(Total = sum(as.numeric(QUANTITY.kg.))) %>% top_n(n = 10, wt = Total)
top_countries <- DF %>% subset(title == 'OTHERS') %>% subset(MONTH == 1) %>% group_by(Countries) %>% summarise(Total = sum(as.numeric(QUANTITY.kg.))) %>% top_n(n = 10, wt = Total)
top_countries=top_countries[order(top_countries$Total,decreasing = TRUE),]
top_countries
runApp('tp.R')
top_countries <- DF %>% subset(title == 'ADHESIVE') %>% subset(MONTH == 1) %>% group_by(Countries) %>% summarise(Total = sum(QUANTITY.kg.)) %>% top_n(n = 10, wt = Total)
top_countries$Countries <- factor(top_countries$Countries, levels = unique(top_countries$Countries))
top_countries <- top_countries[order(-top_countries$Total),]
plot_ly(top_countries,
x = ~Countries,
y = ~Total,
type = "bar"
) %>%
layout(
title = "Top Export Countries",
yaxis = list(title = 'Quantity (kg)')
)
plot_ly(top_countries,
x = ~Countries,
y = ~Total,
type = "bar"
)
top_countries
plot_ly(top_countries,
x = ~Countries,
y = ~Total,
type = "bar"
)
plot_ly(DF,
x = ~Countries,
y = ~Total,
type = "bar"
)
plot_ly(DF,
+         x = ~Countries,
+         y = ~title,
+         type = "bar"
+ )
plot_ly(top_countries,
x = ~Countries,
y = ~Total,
type = "bar"
)
k = plot_ly(top_countries,
x = ~Countries,
y = ~Total,
type = "bar"
)
view(k)
View(k)
plot_ly(DF,
x = ~Countries,
y = ~MONTH,
type = "bar"
)
plot_ly(economics, x = ~pop)
plot_ly(economics, x = ~date, y = ~pop)
# plot_ly() doesn't require data frame(s), which allows one to take
# advantage of trace type(s) designed specifically for numeric matrices
plot_ly(z = ~volcano)
plot_ly(z = ~volcano, type = "surface")
# plotly has a functional interface: every plotly function takes a plotly
# object as it's first input argument and returns a modified plotly object
add_lines(plot_ly(economics, x = ~date, y = ~unemploy/pop))
# To make code more readable, plotly imports the pipe operator from magrittr
economics %>% plot_ly(x = ~date, y = ~unemploy/pop) %>% add_lines()
# Attributes defined via plot_ly() set 'global' attributes that
# are carried onto subsequent traces, but those may be over-written
plot_ly(economics, x = ~date, color = I("black")) %>%
add_lines(y = ~uempmed) %>%
add_lines(y = ~psavert, color = I("red"))
# Attributes are documented in the figure reference -> https://plot.ly/r/reference
# You might notice plot_ly() has named arguments that aren't in this figure
# reference. These arguments make it easier to map abstract data values to
# visual attributes.
p <- plot_ly(iris, x = ~Sepal.Width, y = ~Sepal.Length)
add_markers(p, color = ~Petal.Length, size = ~Petal.Length)
add_markers(p, color = ~Species)
add_markers(p, color = ~Species, colors = "Set1")
add_markers(p, symbol = ~Species)
add_paths(p, linetype = ~Species)
packageVersion('plotly')
library(plotly)
library(dplyr)
p <- plot_ly() %>%
add_pie(data = count(diamonds, cut), labels = ~cut, values = ~n,
name = "Cut", domain = list(x = c(0, 0.4), y = c(0.4, 1))) %>%
add_pie(data = count(diamonds, color), labels = ~color, values = ~n,
name = "Color", domain = list(x = c(0.6, 1), y = c(0.4, 1))) %>%
add_pie(data = count(diamonds, clarity), labels = ~clarity, values = ~n,
name = "Clarity", domain = list(x = c(0.25, 0.75), y = c(0, 0.6))) %>%
layout(title = "Pie Charts with Subplots", showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
plot_ly(top_countries,
x = ~Countries,
y = ~Total,
type = "bar"
) %>%
layout(
title = "Top Export Countries",
yaxis = list(title = 'Quantity (kg)')
)
runApp('tp.R')
runApp('tp.R')
runApp('temp_app1.R')
library(shiny); runApp('tp.R')
runApp('tp.R')
install.packages("shiny")
library(shiny); runApp('tp.R')
runApp('tp.R')
install.packages(c("fastmap", "htmltools", "htmlwidgets", "shiny", "units"))
library(shiny); runApp('tp.R')
DF <- read.csv("Collection_data.csv")
DF1 <- DF
View(DF1)
DF1$Phpkg = formatC(DF1$Phpkg, format="d", big.mark=",")
DF1$QUANTITY.kg. = (DF1$QUANTITY.kg., format="d", big.mark=",")
DF1$QUANTITY.kg. = (DF1$QUANTITY.kg. , format="d", big.mark=",")
if(input$type_subim=="ALL") {
return(DF1[DF1$Company == input$importer,c(1,4:ncol(DF1)-1)])
}else{
return(DF1[DF1$Company == input$importer& DF1$Category ==input$type_subim,c(1,4:ncol(DF1)-1)] )
}
return(DF1[DF1$Company == input$importer,c(1,4:ncol(DF1)-1)])
return(DF1[DF1$Company == '3M PHILS. INC.',c(1,4:ncol(DF1)-1)])
DF1[DF1$Company == '3M PHILS. INC.',c(1,4:ncol(DF1)-1)]
DF1[DF1$IMPORTER == '3M PHILS. INC.',c(1,4:ncol(DF1)-1)]
DF1 <- DF
DF1$Phpkg = formatC(DF1$Phpkg, format="d", big.mark=",")
DF1$QUANTITY.kg. =formatC(DF1$QUANTITY.kg., format="d", big.mark=",")
DF1$L..COST..PhP. =formatC(DF1$L..COST..PhP., format="d", big.mark=",")
DF1[DF1$Company == 'AGP CORPORATION',c(1,4:ncol(DF1)-1)]
DF1[DF1$EXPORTER == 'AGP CORPORATION',c(1,4:ncol(DF1)-1)]
DF1[DF1$IMPORTER == 'AGP CORPORATION',c(1,4:ncol(DF1)-1)]
DF1[DF1$IMPORTER == '3M PHILS. INC.	',c(1,4:ncol(DF1)-1)]
DF1[DF1$IMPORTER == '3M PHILS. INC.',c(1,4:ncol(DF1)-1)]
DF1[DF1$IMPORTER == '3M PHILS. INC.' & DF1$Category == 	'ADHESIVE' ,c(1,4:ncol(DF1)-1)]
runApp('tp.R')
runApp('tp.R')
as.character(sort(unique(DF[DF$Company == '3M PHILS. INC.',]$title
as.character(sort(unique(DF[DF$Company == input$importer_com,]$title)))
as.character(sort(unique(DF[DF$Company == input$importer_com,]$title)))
as.character(sort(unique(DF[DF$Company == '3M PHILS. INC.',]$title)))
View(DF)
as.character(sort(unique(DF[DF$IMPORTER == '3M PHILS. INC.',]$title)))
runApp('tp.R')
runApp('tp.R')
library(shiny); runApp('tp.R')
runApp('tp.R')
runApp('tp.R')
DF1 <- DF
DF1$Phpkg = formatC(DF1$Phpkg, format="d", big.mark=",")
DF1$QUANTITY.kg. =formatC(DF1$QUANTITY.kg., format="d", big.mark=",")
DF1$L..COST..PhP. =formatC(DF1$L..COST..PhP., format="d", big.mark=",")
DF1 <- DF1[DF1$Countries == 'Argentina']
DF1$Countries
DF1$Countries == input$exporter_country
DF1$Countries == 'China'
DF1[DF1$Countries == 'China']
DF1[DF1$Countries == 'China',]
runApp('tp.R')
runApp('tp.R')
runApp('tp.R')
DF1
view(DF1)
View(DF1)
runApp('tp.R')
runApp('tp.R')
runApp('tp.R')
