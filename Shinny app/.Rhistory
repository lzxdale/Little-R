library(shiny)
ui <- fluidPage()
server <- function(input, output) {}
shinyApp(ui = ui, server = server)
install.packages("shiny")
library(shiny)
ui <- fluidPage()
server <- function(input, output) {}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
# *Input() functions,
# *Output() functions
sliderInput(inputId = "num", label = "sbb",
value = 25, min = 1, max = 100)
)
server <- function(input, output) {}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
# *Input() functions,
# *Output() functions
sliderInput(inputId = "num", label = "sbb",
value = 25, min = 1, max = 100),
output("hist")
)
server <- function(input, output) {
output$hist <- renderPlot({
title <- "100 random normal values"
hist(rnorm(100), main = title)
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
# *Input() functions,
# *Output() functions
sliderInput(inputId = "num", label = "sbb",
value = 25, min = 1, max = 100),
plotOutput("hist")
)
server <- function(input, output) {
output$hist <- renderPlot({
title <- "100 random normal values"
hist(rnorm(100), main = title)
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
# *Input() functions,
# *Output() functions
sliderInput(inputId = "num", label = "sbb",
value = 25, min = 1, max = 100),
plotOutput("hist")
)
server <- function(input, output) {
output$hist <- renderPlot({
title <- "100 random normal values"
hist(rnorm(input$num), main = title)
})
}
shinyApp(ui = ui, server = server)
runApp('s1.R')
runApp('s1.R')
runApp('s1.R')
runApp('s1.R')
install.packages(c("dplyr", "DT", "ggplot2", "leaflet", "leafpop", "maps", "mapview", "plotly", "plyr", "readr", "shinythemes"))
df1 <- read.csv('ADHESIVES-JANUARY 2018.csv')
df1
df1 <- read.csv("ADHESIVES-JANUARY 2018.csv")
View(df1)
View(df1)
Des <- df1$DESCRIPTION
Des
print(var)
cout(var)
Des <- c(df1$DESCRIPTION)
for (var in Des) {
print(var)
}
Des <- df1$DESCRIPTION
des_l <- list(Des)
View(des_l)
des_l <- c(Des)
des_l <- Levels(Des)
des_l <- levels(Des)
for (var in des_1) {
print(var)
}
des_list <- levels(Des)
des_list <- levels(Des)
for (var in des_list) {
print(var)
}
c(empty_c, var)
empty_c = c()
c(empty_c, var)
empty_c.append(var)
'a' + 'b'
paste(1,2,3)
paste(des_list)
str <- paste(des_list)
str
str <- paste0(des_list)
str
str <- paste0(des_list(:))
str <- paste0(Des(:))
str <- paste0(Des
str <- paste0(Des)
str <- paste(Des)
str
length(str)
print(b)
for (var in c(1,2,3)) {
print(b)
}
for (var in c(1,2,3)) {
print(var)
}
print(strsplit("as bs sbb"))
strsplit("as bs sbb",'')
strsplit("as bs sbb",' ')
for (var in c("as bs","bbbb,ssss")) {
strsplit(var,' ')
c(tmp,strsplit(var,' '))
}
tmp <- c()
for (var in c("as bs","bbbb,ssss")) {
strsplit(var,' ')
tmp<- c(tmp,strsplit(var,' '))
}
tmp
for (var in c("as bs","bbbb,ssss")) {
strsplit(var,' ')
tmp<- c(tmp,unlist(strsplit(var,' ')))
}
View(tmp)
View(tmp)
tmp <- c()
for (var in c("as bs","bbbb ssss")) {
strsplit(var,' ')
tmp<- c(tmp,unlist(strsplit(var,' ')))
}
tmp
for (var in c("as bs","bs as")) {
strsplit(var,' ')
tmp<- c(tmp,unlist(strsplit(var,' ')))
}
tmp <- c()
for (var in c("as bs","bs as")) {
strsplit(var,' ')
tmp<- c(tmp,unlist(strsplit(var,' ')))
}
tmp
levels(tmp)
unique(tmp)
tmp <- c()
for (var in des_list) {
strsplit(var,' ')
tmp<- c(tmp,unlist(strsplit(var,' ')))
}
unique(tmp)
summary(as.factor(tmp))
runApp('s1.R')
runApp('s1.R')
summary(as.factor(tmp))
lenght(tmp)
length(tmp)
unique(df1$title)
df1 <- read.csv("JANUARY 2018-des.csv")
unique(df1$title)
library(shiny); runApp('s1.R')
runApp('s1.R')
runApp('s1.R')
runApp('s1.R')
Jan <- read.csv("JANUARY 2018-des.csv")
View(Jan)
product_list = c(Jan$title)
product_list = sort(unique(Jan$title))
product_list
exporter_list = sort(unique(Jan$IMPORTER))
importer_list = sort(unique(Jan$EXPORTER))
importer_list
runApp('s1.R')
runApp('s1.R')
country_list <- sort(unique(Jan$ORIGIN))
runApp('s1.R')
runApp('s1.R')
runApp('s1.R')
runApp('s1.R')
c("ALL", importer_list)
importer_list
c(importer_list)
importer_list+'ALL'
factor('all', importer_list)
cbind("ALL", importer_list)
rbind("ALL", importer_list)
str(importer_list)
unlist(importer_list)
c('ALL',unlist(importer_list))
factor(append("ALL", importer_list))
factor(append("ALL", as.character(importer_list)))
append("ALL", as.character(importer_list)))
append("ALL", as.character(importer_list))
append("ALL", as.character(importer_list))
runApp('s1.R')
runApp('s1.R')
runApp('s1.R')
runApp('s1.R')
runApp('s1.R')
library(maps)
emptymap()
html.global_talent <- read_html("https://www.insead.edu/news/2017-global-talent-competitiveness-index-davos")
runApp('s1.R')
plotlyOutput()
plotlyOutput('sb')
library(shiny)
library(shinythemes)
library(plyr)
library(dplyr)
library(readr)
library(ggplot2)
library(plotly)
library(leaflet)
library(maps)
library(leafpop)
library(mapview)
library(DT)
merged = read_csv('JANUARY 2018-des.csv')
short = cbind(merged$DATE1,merged$IMPORTER,merged$Countries,merged$DESCRIPTION,merged$Type,merged$Price, merged$QUANTITY,merged$PhPkg,merged$USDton, merged$NO.)
colnames(short) = c('Date','Company','Countries','Product','Category','Price (PhP)','Quantity (Kg)', 'Unit Price (PhP/kg)','Unit Price (USD/ton)','No')
short = as.data.frame(short)
short$No = as.numeric(short$No)
short = short[sort(short$No),]
export = cbind(merged$DATE1,merged$EXPORTER,merged$Countries, merged$IMPORTER,merged$DESCRIPTION,merged$Type,merged$Price, merged$QUANTITY,merged$PhPkg,merged$USDton, merged$NO.)
colnames(export) = c('Date','Company','Countries','Importer','Product','Category','Price (PhP)','Quantity (Kg)', 'Unit Price (PhP/kg)','Unit Price (USD/ton)','No')
export = as.data.frame(export)
export$No=as.numeric(export$No)
export = export[order(export$No),]
merged = read_csv('JANUARY 2018-des.csv')
View(merged)
View(merged)
View(merged)
View(merged)
library(shiny)
library(shinythemes)
library(plyr)
library(dplyr)
library(readr)
library(ggplot2)
library(plotly)
library(leaflet)
library(maps)
library(leafpop)
library(mapview)
library(DT)
merged = read_csv('JANUARY 2018-des.csv')
runApp('s1.R')
runApp('s1.R')
subset(Jan, Des == 'GLUE')
Jan %>% subset(Type == input$type) %>% group_by(Countries)
Jan %>% subset(Des == input$type) %>% group_by(Countries)
runApp('s1.R')
runApp('s1.R')
runApp('s1.R')
Jan$QUANTITY.kg.
!!
break
sum(Jan$QUANTITY.kg.)
t1 = as.numeric(Jan$QUANTITY.kg.)
sum(t1)
runApp('s1.R')
runApp('s1.R')
library(shiny); runApp('temp_app.R')
